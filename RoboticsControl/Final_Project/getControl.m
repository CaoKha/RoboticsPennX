function [f,M] = getControl(m,J,s,traj,t)
%   s, the state vector of the quadrotor in the form [r1; r2; r3; v1; v2; v3; R11; R12; R13; R21; R22; R23; R31; R32; R33; Om1; Om2; Om3] where
%   r = [r1; r2; r3] is the position of the quadrotor in the world frame
%   v = [v1; v2; v3] is the velocity of the quadrotor in the world frame
%   R = [R11 R12 R13; R21 R22 R23; R31 R32 R33] is the rotation matrix from the quadrotor body frame to the world frame
%   Omega = [Om1; Om2; Om3] is the angular velocity of the quadrotor in the body frame
%   Note: there was an error in instruction, R should be transpose
    g = 9.81;
    
    %% Tuning parameters
    Kp_scalar = 25; 
    Kp = Kp_scalar*eye(3);
    Kv_scalar = 3; 
    Kv = Kv_scalar*eye(3);
    Kr_scalar = 3000;
    Kr = Kr_scalar*eye(3);
    Kw_scalar = 200;
    Kw = Kw_scalar*eye(3);
    %% Step 1: Calculate u1
    
    % Desired matrix [pos; vel; acel] = derivative_matrix*traj (slow)
%     syms k;
%     
%     x_des_matrix = double(subs(derivative_matrix(3)*traj(:,1),k,t))
%     y_des_matrix = double(subs(derivative_matrix(3)*traj(:,2),k,t))
%     z_des_matrix = double(subs(derivative_matrix(3)*traj(:,3),k,t))
%     theta3_des_matrix = double(subs(derivative_matrix(3)*traj(:,4),k,t))
    
    % inline function derivative matrix for quicker execution
     D = [ 1, t, t^2,   t^3,    t^4,    t^5,    t^6,    t^7;
            0, 1, 2*t, 3*t^2,  4*t^3,  5*t^4,  6*t^5,  7*t^6;
            0, 0,   2,   6*t, 12*t^2, 20*t^3, 30*t^4, 42*t^5;
            0, 0,   0,     6,   24*t, 60*t^2, 120*t^3, 210*t^4];
    x_des_matrix = D*traj(:,1);
    y_des_matrix = D*traj(:,2);
    z_des_matrix = D*traj(:,3);
    theta3_des_matrix = D*traj(:,4);
    
    % Desired acceleration, velocity and position of the drone
    pos_des = [x_des_matrix(1);
                y_des_matrix(1);
                z_des_matrix(1)];
    vel_des = [x_des_matrix(2);
                y_des_matrix(2);
                z_des_matrix(2)];   
    acel_des = [x_des_matrix(3);
                y_des_matrix(3);
                z_des_matrix(3)];       
    jerk_des = [x_des_matrix(4);
                y_des_matrix(4);
                z_des_matrix(4)];       
    w_theta3_des = theta3_des_matrix(2); 
    
    % Current acceleration, velocity and position of the drone
    pos_cur = s(1:3);
    vel_cur = s(4:6);
    R_cur_intro = [s(7), s(8), s(9);
            s(10), s(11), s(12);
            s(13), s(14), s(15)];
    R_cur = R_cur_intro';
    w_cur = s(16:end);
    
    % Calculate thrust unit vector should be generated by the drone in the
    % direction upward in body frame
    a3 = [0;0;1];
    t = m*(acel_des + Kv*(vel_des-vel_cur) + Kp*(pos_des-pos_cur) + g*a3);
    t_norm = sqrt(t(1)^2 + t(2)^2 + t(3)^2);
    t_unit = t/t_norm;
    
    % Calculate R_des
    theta3_des = theta3_des_matrix(1);
    
    % According to the paper "Minimum Snap Control for Quadrotor"
    zb_des_unit = t_unit;
    xc_des = [cos(theta3_des);sin(theta3_des);0];
    yb_des = cross(zb_des_unit,xc_des);
    yb_des_norm = sqrt(yb_des(1)^2+yb_des(2)^2+yb_des(3)^2);
    yb_des_unit = yb_des/yb_des_norm;
    xb_des_unit = cross(yb_des_unit,zb_des_unit);
    
    R_des = [xb_des_unit, yb_des_unit, zb_des_unit];
    
    % Calculate input u1 (aka f)
    b3 = [0;0;1];
    f = dot(t,R_cur*b3);
    
    %% Step 2 Calculate u2
    % w_theta3_des is given in the world coordinate and the w_cur is given
    % in the body frame; therefore, w_theta3_des should be converted to
    % body frame by projecting it into xb,yb,zb
    h_w = m/f*(jerk_des-(dot(zb_des_unit,jerk_des)*zb_des_unit));
    p = dot(-h_w,yb_des_unit);
    q = dot(h_w,xb_des_unit);
    zW = [0;0;1];
    r = dot(w_theta3_des*zW,zb_des_unit);
    w_des = [p;q;r];
    % Calculate eR, eR is a skew symmetric matrix, it should be mapped into
    % a vector
%     eR = 1/2*(R_des'*R_cur - R_cur'*R_des);
    eR = R_des'*R_cur;
    % Mapping eR to a vector
    v_eR = [eR(3,2);eR(1,3);eR(2,1)];
    % Calculate eW
    eW = w_cur - w_des;
    % Calculate input u2 (aka M)
    % formula in PPT
    M = cross(w_cur,J*w_cur)+J*(-Kr*v_eR - Kw*eW);
    % formula in the paper
%     M = (-Kr*v_eR - Kw*eW);
    
    
    
end